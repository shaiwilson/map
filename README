/-------------------------------------------------------------------------
Implemented with Java using the google map api. Created my own intersection data pulled from a region in San Diego. 
Using my own data structures and depth first search, breadth first search, and Dijkstra's algorithm for shortest paths. 
/
/ Authored by @Shai Wilson:
/
/-------------------------------------------------------------------------

---------------------------------------------------------[ DESCRIPTION ]--
SEARCH OPTIONS:
Depth first search - 
to keep track of where to search, I implement a stack to find the last node I tried to explore from until finding another path. 
To keep track of the nodes that I've already visited I use a hash set so that I can add, remove, and find elements in constant time. 
To keep track of the path from start to destination, I use a hash map which has a link to each node from which it was discovered. 

-------------------------------------------------------[ FILES BY WEEK ]--

Week 1 : Implement graphs representation : adjacency list vs matrix
==============================================
basicgraph.Graph.java
basicgraph.GraphAdjList.java
basicgraph.GraphAdjMatrix.java

Week 2 : Class design and simple graph search
==================================================
roadgraph.MapGraph.java
week2example.Maze.java
week2example.MazeLoader.java
week2example.MazeNode.java

Utility files
=============
geography.GeographicPoint.java
geography.RoadSegment.java
util.GraphLoader.java

---------------------------------------------------------------[ SETUP ]-- 

Importing Project into eclipse:
	1. Create a new Java Project in your workspace
	2. Import the starter files:
	  File -> Import -> Select "File System" -> Next -> Browse and set 
	  root directory to folder contents of zip were extracted to -> Finish


